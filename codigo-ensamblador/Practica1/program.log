Open PicoBlaze Assembler log for program "program.asm"
Generated by opbasm v1.3.10
  Assembled on 2024-03-05T18:00:10
  Target architecture: PicoBlaze-3

  Last occupied address: 096 hex
  Nominal program memory size: 1K (1024)  address(9:0)
  Actual memory size: 1024
  Occupied memory locations: 152
  Memory locations available: 872
  Scratchpad size: 64


Assembly listing
----------------
000  3C001                              enable interrupt

001                                     constant n_points, 10


001                                     constant spi_port, 00

001                                     constant rom_oport, 02


001                                     constant rom_iport, 00


001                                     namereg s9, point
001                                     namereg sa, high_rom
001                                     namereg sb, low_rom



001  34091 ╭──────⤙                     jump MAIN
           │
002        │                            ;DELAYS
           │
002        │                            constant c_delay_1us, 0B       ; at 50Mhz
           │
002        │                            ;TIMERS
002        │                            ;all this region uses registers s0 to s4
002  0000B ╭────┬─▶          delay_1us: load s0, c_delay_1us
003  1C001 │    │╭▶           wait_1us: sub s0, 01
004  35403 │    │╰⤙                     jump NZ, wait_1us
005  2A000 │    │                       return
           │    │
006  00128 ╭──┬┬──▶         delay_40us: load s1, 28                    ;40 x 1us = 40us
007  30002 │  ││╰┬⤙          wait_40us: call delay_1us
008  1C101 │  ││ │                      sub s1, 01
009  35407 │  ││ ╰⤙                     jump NZ, wait_40us
00A  2A000 │  ││                        return
           │  ││
00B  00219 ╭─┬────▶          delay_1ms: load s2, 19                    ;25 x 40us = 1ms
00C  30006 │ ││╰─┬⤙           wait_1ms: call delay_40us
00D  1C201 │ ││  │                      sub s2, 01
00E  3540C │ ││  ╰⤙                     jump NZ, wait_1ms
00F  2A000 │ ││                         return
           │ ││
010  0027D ╭──────▶          delay_5ms: load s2, 7D                    ;125 x 40us = 1ms
011  30006 │ │╰──┬⤙           wait_5ms: call delay_40us
012  1C201 │ │   │                      sub s2, 01
013  35411 │ │   ╰⤙                     jump NZ, wait_5ms
014  2A000 │ │                          return
           │ │
015  00314 ╭────┬─▶         delay_20ms: load s3, 14                    ;20 x 1ms = 20ms
016  3000B │ ╰───┬⤙          wait_20ms: call delay_1ms
017  1C301 │    ││                      sub s3, 01
018  35416 │    │╰⤙                     jump NZ, wait_20ms
019  2A000 │    │                       return
           │    │
01A  00432 │    │             delay_1s: load s4, 32                    ;50 x 20ms = 1000ms
01B  30015 │    ╰┬⤙            wait_1s: call delay_20ms
01C  1C401 │     │                      sub s4, 01
01D  3541B │     ╰⤙                     jump NZ, wait_1s
01E  2A000 │                            return
           │
01F        │                            ;Tarea 3 lcd
01F        │                            ;constants
           │
01F        │                            constant LCD_PORT, 01
           │
           │
           │
01F        │                            ; 7 6 5  4  3  2  1  0
01F        │                            ; X E RS RW D7 D6 D5 D4
           │
01F        │                            ;from here everything will use s5 register up to s7
01F        │                            ;s5 will hold the data to be sent
           │
01F  30002 ╭─────┬▶        LCD_E_PULSE: call delay_1us
020  0E540 │     │                      xor s5, 40
021  2C501 │     │                      output s5, LCD_PORT
022  30002 ╰──────⤙                     call delay_1us
023  0E540 │     │                      xor s5, 40
024  2C501 │     │                      output s5, LCD_PORT
025  2A000 │     │                      return
           │     │
026  0A5DF ╭┬┬┬┬┬─▶            LCD_CMD: and s5, DF
027  2C501 │││││││                      output s5, LCD_PORT
028  3001F ││││││╰⤙                     call LCD_E_PULSE
029  2A000 ││││││                       return
           ││││││
02A  00500 ││││││             LCD_INIT: load s5, 00
02B  2C501 ││││││                       output s5, LCD_PORT
02C  30015 ╰──────⤙                     call delay_20ms
           ││││││
02D  00503 ││││││                       load s5, 03                    ;Send 3 and wait > 4.1ms
02E  30026 │││││╰─⤙                     call LCD_CMD
02F  30010 ╰──────⤙                     call delay_5ms
           │││││
030  00503 │││││                        load s5, 03                    ;Send 3 and wait > 100us
031  30026 ││││╰──⤙                     call LCD_CMD
032  30006 ╰──────⤙                     call delay_40us
033  30006 ╰──────⤙                     call delay_40us
034  30006 ╰──────⤙                     call delay_40us
           ││││
035  00503 ││││                         load s5, 03                    ;Send 3 and wait > 40us
036  30026 │││╰───⤙                     call LCD_CMD
037  30006 ╰──────⤙                     call delay_40us
           │││
038  00502 │││                          load s5, 02                    ;Send 2 and wait > 40us
039  30026 ││╰────⤙                     call LCD_CMD
03A  30006 ╰──────⤙                     call delay_40us
           ││
03B        ││                           ;FUNCTION SET
           ││
03B  00502 ││                           load s5, 02                    ;high nibble 0x28
03C  30026 │╰─────⤙                     call LCD_CMD
03D  30002 ╰──────⤙                     call delay_1us
03E  00508 │                            load s5, 08                    ;lower nibble 0x28
03F  30026 ╰──────⤙                     call LCD_CMD
040  30006 ╰──────⤙                     call delay_40us
           │
041  00500 │                            load s5, 00                    ;high nibble 0x0C
042  30026 ╰──────⤙                     call LCD_CMD
043  30002 ╰──────⤙                     call delay_1us
044  0050C │                            load s5, 0C                    ;lower nibble 0x06
045  30026 ╰──────⤙                     call LCD_CMD
046  30006 ╰──────⤙                     call delay_40us
           │
047  00500 │                            load s5, 00                    ;high nibble 0x0C
048  30026 ╰──────⤙                     call LCD_CMD
049  30002 ╰──────⤙                     call delay_1us
04A  00506 │                            load s5, 06                    ;lower nibble 0x0C
04B  30026 ╰──────⤙                     call LCD_CMD
04C  30006 ╰──────⤙                     call delay_40us
           │
04D  00500 │                 LCD_CLEAR: load s5, 00                    ;high nibble 0x01
04E  30026 ╰──────⤙                     call LCD_CMD
04F  30002 ╰──────⤙                     call delay_1us
050  00501 │                            load s5, 01                    ;lower nibble 0x01
051  30026 ╰──────⤙                     call LCD_CMD
052  3000B ╰──────⤙                     call delay_1ms                 ;wait > 1.64ms
053  3000B ╰──────⤙                     call delay_1ms
054  2A000 │                            return
           │
055  01650 │            LCD_WRITE_CHAR: load s6, s5                    ; s6 is X, s7 is Y
056  01750 │                            load s7, s5
057  0A60F │                            and s6, 0x0F
058  0A7F0 │                            and s7, 0xF0
059  0E620 │                            xor s6, 20
05A  0E720 │                            xor s7, 20
           │
05B  2060E │                            sr0 s6                         ; s6>>4
05C  2060E │                            sr0 s6
05D  2060E │                            sr0 s6
05E  2060E │                            sr0 s6
           │
05F  01650 │                            load s6, s5
060  30026 ╰──────⤙                     call LCD_CMD
061  30002 ╰──────⤙                     call delay_1us
           │
062  01750 │                            load s7, s5
063  30026 ╰──────⤙                     call LCD_CMD
064  30006 ╰──────⤙                     call delay_40us
065  2A000 │                            return
           │
066  0C520 │                 LCD_CHARA: or s5, 20
067  2C501 │                            output s5, LCD_PORT
068  3001F ╰──────⤙                     call LCD_E_PULSE
069  2A000 │                            return
           │
3FF        │                            ;IMPORTANTE: USEN s8-sF
           │
           │
           │
06A        │              spi_done_isr:
3FF        │                            address 3FF                    ; Switch to interrupt vector address
3FF  3406A │     ╭⤙                     jump spi_done_isr              ; Assemble instruction at interrupt vector location
06A        │     │                      address spi_done_isr           ; Resume assembly at address previously captured in "spi_done_isr"
06A        │     │                      ;TODO
           │     │
06A  30087 ╭─────┴⤙                     call next_16bit_rom
06B  3006D │     ╭⤙                     call spi_send
           │     │
06C  38001 │     │                      returni enable
           │     │
06D  008F0 ╭─────┴▶           spi_send: load s8, F0
06E  2C800 │                            output s8, spi_port
           │
06F  018A0 │                            load s8, high_rom
070  2C800 │                            output s8, spi_port
           │
071  018B0 │                            load s8, low_rom
072  2C800 │                            output s8, spi_port
           │
073  00800 │                            load s8, 00
074  2C800 │                            output s8, spi_port
075        │                            ;32 clock cycles
075  01880 │                            load s8, s8
076  01880 │                            load s8, s8
077  01880 │                            load s8, s8
078  01880 │                            load s8, s8
079  01880 │                            load s8, s8
07A  01880 │                            load s8, s8
07B  01880 │                            load s8, s8
07C  01880 │                            load s8, s8
07D  01880 │                            load s8, s8
07E  01880 │                            load s8, s8
07F  01880 │                            load s8, s8
080  01880 │                            load s8, s8
081  01880 │                            load s8, s8
082  01880 │                            load s8, s8
083  01880 │                            load s8, s8
084  01880 │                            load s8, s8
           │
085  01880 │                            load s8, s8
086        │                            ;OUTPUT s8, spi_port ;end
086  2A000 │                            return
           │
087        │            next_16bit_rom:
087        │                            ;high byte
087  2C902 ╰────┬─▶                     output point, rom_oport
088  04A00 │    │                       input high_rom, rom_iport
089  18901 │    │                       add point, 01
           │    │
08A        │    │                       ;low byte
08A  2C902 │    │                       output point, rom_oport
08B  04B00 │    │                       input low_rom, rom_iport
08C  18901 │    │                       add point, 01
           │    │
08D  14910 │    │                       compare point, n_points
08E  35490 │    │╭⤙                     jump NZ, .end
08F  00900 │    ││                      load point, 00
090        │    ││                .end:
090  2A000 │    │╰▶                     return
           │    │
           │    │
091  00900 ╰──────▶               MAIN: load point, 00
           │    │
092        │    │                       ;LOAD s5, 80
092        │    │                       ;OUTPUT s5, LCD_PORT
092        │    │                       ;CALL delay_1s
092        │    │                       ;CALL LCD_INIT
           │    │
092        │    │                       ;LOAD s5, 04 ;high nibble 0x28
092        │    │                       ;CALL LCD_CHARA
092        │    │                       ;CALL delay_1us
092        │    │                       ;LOAD s5, 0A ;lower nibble 0x28
092        │    │                       ;CALL LCD_CHARA
092        │    │                       ;CALL delay_40us
           │    │
           │    │
092  30002 ╰──────⤙                     call delay_1us
           │    │
093  30087 │    ╰─⤙                     call next_16bit_rom
094  3006D ╰──────⤙                     call spi_send

095                              loopp:
095  01FF0       ╭▶                     load sf, sf
096  34095       ╰⤙                     jump loopp


All unused memory locations contain zero (equivalent to "LOAD s0, 00")


PSM files that have been assembled
----------------------------------
    /home/leon/Documents/Code/sistemas-empotrados-S6/codigo-ensamblador/Practica1/program.asm
    /home/leon/Documents/Code/sistemas-empotrados-S6/codigo-ensamblador/utils/lcd.asm
    /home/leon/Documents/Code/sistemas-empotrados-S6/codigo-ensamblador/utils/delay.asm


List of defined constants
-------------------------
    CONSTANT name      Value  Source PSM file   
 ----------------      -----  ---------------   
    BEL                07
    BS                 08
    CR                 0D
    DCS                90
    DEL                7F
    ESC                1B
    HT                 09
    LCD_PORT           01     ../utils/lcd.asm
    LF                 0A
    NUL                00
    ST                 9C
    VT                 0B
    c_delay_1us        0B     ../utils/delay.asm
    datestamp_day      05
    datestamp_month    03
    datestamp_year     18
    n_points           10     program.asm
    rom_iport          00     program.asm
    rom_oport          02     program.asm
    spi_port           00     program.asm
    timestamp_hours    12
    timestamp_minutes  00
    timestamp_seconds  0A


  No tables defined


List of text strings
--------------------
    STRING name      Value          Source PSM file
 --------------      -----          ---------------
    Opbasm_version$  "1.3.10"
    datestamp$       "05 Mar 2024"
    timestamp$       "18:00:10"


List of line labels
-------------------
    Label               Addr  Source PSM file   
 --------               ----  ---------------   
 *  LCD_CHARA           066   ../utils/lcd.asm
 *  LCD_CLEAR           04D   ../utils/lcd.asm
    LCD_CMD             026   ../utils/lcd.asm
    LCD_E_PULSE         01F   ../utils/lcd.asm
 *  LCD_INIT            02A   ../utils/lcd.asm
 *  LCD_WRITE_CHAR      055   ../utils/lcd.asm
    MAIN                091   program.asm
    delay_1ms           00B   ../utils/delay.asm
 *  delay_1s            01A   ../utils/delay.asm
    delay_1us           002   ../utils/delay.asm
    delay_20ms          015   ../utils/delay.asm
    delay_40us          006   ../utils/delay.asm
    delay_5ms           010   ../utils/delay.asm
    loopp               095   program.asm
    next_16bit_rom      087   program.asm
    next_16bit_rom.end  090   program.asm
    spi_done_isr        06A   program.asm
    spi_send            06D   program.asm
    wait_1ms            00C   ../utils/delay.asm
    wait_1s             01B   ../utils/delay.asm
    wait_1us            003   ../utils/delay.asm
    wait_20ms           016   ../utils/delay.asm
    wait_40us           007   ../utils/delay.asm
    wait_5ms            011   ../utils/delay.asm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          2
   ADDCY        -
   AND          3
   CALL         46
   COMPARE      1
   DISABLE      -
   ENABLE       1
   FETCH        -
   INPUT        2
   JUMP         10
   LOAD         47
   OR           1
   OUTPUT       11
   RETURN       13
   RETURNI      1
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          4
   SR1          -
   SRA          -
   SRX          -
   STORE        -
   SUB          6
   SUBCY        -
   TEST         -
   XOR          4
