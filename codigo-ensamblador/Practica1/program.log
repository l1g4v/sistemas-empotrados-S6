Open PicoBlaze Assembler log for program "program.asm"
Generated by opbasm v1.3.10
  Assembled on 2024-03-11T08:34:11
  Target architecture: PicoBlaze-3

  Last occupied address: 0AB hex
  Nominal program memory size: 1K (1024)  address(9:0)
  Actual memory size: 1024
  Occupied memory locations: 173
  Memory locations available: 851
  Scratchpad size: 64


Assembly listing
----------------
000  3C001                              enable interrupt

001                                     constant n_points, 7E


001                                     constant spi_port, 00

001                                     constant rom_oport, 02


001                                     constant rom_iport, 00


001                                     namereg s9, point
001                                     namereg sa, high_rom
001                                     namereg sb, low_rom



001  3409C ╭──────⤙                     jump MAIN
           │
002        │                            ;DELAYS
           │
002        │                            constant c_delay_1us, 0B       ; at 50Mhz
           │
002        │                            ;TIMERS
002        │                            ;all this region uses registers s0 to s4
002  0000B ╭┬──┬┬─▶          delay_1us: load s0, c_delay_1us
003  1C001 ││  ││╭▶           wait_1us: sub s0, 01
004  35403 ││  ││╰⤙                     jump NZ, wait_1us
005  2A000 ││  ││                       return
           ││  ││
006  00108 ╭──────▶          delay_8us: load s1, 08                    ;8 x 1us = 8us
007  30002 ││  │╰─⤙           wait_8us: call delay_1us
008  1C101 ││  │                        sub s1, 01
009  35411 ││ ╭───⤙                     jump NZ, wait_40us
00A  2A000 ││ ││                        return
           ││ ││
00B  00119 ││ ││            delay_25us: load s1, 19                    ;25 x 1us = 25us
00C  30002 ││ │╰──⤙          wait_25us: call delay_1us
00D  1C101 ││ │                         sub s1, 01
00E  35411 ││ │ ╭─⤙                     jump NZ, wait_40us
00F  2A000 ││ │ │                       return
           ││ │ │
010  00128 ╭─┬─┬──▶         delay_40us: load s1, 28                    ;40 x 1us = 40us
011  30002 │╰─┴─┴┬⤙          wait_40us: call delay_1us
012  1C101 │ │ │ │                      sub s1, 01
013  35411 │ │ │ ╰⤙                     jump NZ, wait_40us
014  2A000 │ │ │                        return
           │ │ │
015  00219 ╭──┬───▶          delay_1ms: load s2, 19                    ;25 x 40us = 1ms
016  30010 │ ││╰─┬⤙           wait_1ms: call delay_40us
017  1C201 │ ││  │                      sub s2, 01
018  35416 │ ││  ╰⤙                     jump NZ, wait_1ms
019  2A000 │ ││                         return
           │ ││
01A  0027D ╭──────▶          delay_5ms: load s2, 7D                    ;125 x 40us = 1ms
01B  30010 │ ╰───┬⤙           wait_5ms: call delay_40us
01C  1C201 │  │  │                      sub s2, 01
01D  3541B │  │  ╰⤙                     jump NZ, wait_5ms
01E  2A000 │  │                         return
           │  │
01F  00314 ╭────┬─▶         delay_20ms: load s3, 14                    ;20 x 1ms = 20ms
020  30015 │  ╰──┬⤙          wait_20ms: call delay_1ms
021  1C301 │    ││                      sub s3, 01
022  35420 │    │╰⤙                     jump NZ, wait_20ms
023  2A000 │    │                       return
           │    │
024  00432 ╭──────▶           delay_1s: load s4, 32                    ;50 x 20ms = 1000ms
025  3001F │    ╰┬⤙            wait_1s: call delay_20ms
026  1C401 │     │                      sub s4, 01
027  35425 │     ╰⤙                     jump NZ, wait_1s
028  2A000 │                            return
           │
029        │                            ;Tarea 3 lcd
029        │                            ;constants
           │
029        │                            constant LCD_PORT, 01
           │
           │
           │
029        │                            ; 7 6 5  4  3  2  1  0
029        │                            ; X E RS RW D7 D6 D5 D4
           │
029        │                            ;from here everything will use s5 register up to s7
029        │                            ;s5 will hold the data to be sent
           │
029  30002 ╭─────┬▶        LCD_E_PULSE: call delay_1us
02A  0E540 │     │                      xor s5, 40
02B  2C501 │     │                      output s5, LCD_PORT
02C  30002 ╰──────⤙                     call delay_1us
02D  0E540 │     │                      xor s5, 40
02E  2C501 │     │                      output s5, LCD_PORT
02F  2A000 │     │                      return
           │     │
030  0A5DF ╭┬┬┬┬┬─▶            LCD_CMD: and s5, DF
031  2C501 │││││││                      output s5, LCD_PORT
032  30029 ││││││╰⤙                     call LCD_E_PULSE
033  2A000 ││││││                       return
           ││││││
034  00500 ╭──────▶           LCD_INIT: load s5, 00
035  2C501 ││││││                       output s5, LCD_PORT
036  3001F ╰──────⤙                     call delay_20ms
           ││││││
037  00503 ││││││                       load s5, 03                    ;Send 3 and wait > 4.1ms
038  30030 │││││╰─⤙                     call LCD_CMD
039  3001A ╰──────⤙                     call delay_5ms
           │││││
03A  00503 │││││                        load s5, 03                    ;Send 3 and wait > 100us
03B  30030 ││││╰──⤙                     call LCD_CMD
03C  30010 ╰──────⤙                     call delay_40us
03D  30010 ╰──────⤙                     call delay_40us
03E  30010 ╰──────⤙                     call delay_40us
           ││││
03F  00503 ││││                         load s5, 03                    ;Send 3 and wait > 40us
040  30030 │││╰───⤙                     call LCD_CMD
041  30010 ╰──────⤙                     call delay_40us
           │││
042  00502 │││                          load s5, 02                    ;Send 2 and wait > 40us
043  30030 ││╰────⤙                     call LCD_CMD
044  30010 ╰──────⤙                     call delay_40us
           ││
045        ││                           ;FUNCTION SET
           ││
045  00502 ││                           load s5, 02                    ;high nibble 0x28
046  30030 │╰─────⤙                     call LCD_CMD
047  30002 ╰──────⤙                     call delay_1us
048  00508 │                            load s5, 08                    ;lower nibble 0x28
049  30030 ╰──────⤙                     call LCD_CMD
04A  30010 ╰──────⤙                     call delay_40us
           │
04B  00500 │                            load s5, 00                    ;high nibble 0x0C
04C  30030 ╰──────⤙                     call LCD_CMD
04D  30002 ╰──────⤙                     call delay_1us
04E  0050C │                            load s5, 0C                    ;lower nibble 0x06
04F  30030 ╰──────⤙                     call LCD_CMD
050  30010 ╰──────⤙                     call delay_40us
           │
051  00500 │                            load s5, 00                    ;high nibble 0x0C
052  30030 ╰──────⤙                     call LCD_CMD
053  30002 ╰──────⤙                     call delay_1us
054  00506 │                            load s5, 06                    ;lower nibble 0x0C
055  30030 ╰──────⤙                     call LCD_CMD
056  30010 ╰──────⤙                     call delay_40us
           │
057  00500 │                 LCD_CLEAR: load s5, 00                    ;high nibble 0x01
058  30030 ╰──────⤙                     call LCD_CMD
059  30002 ╰──────⤙                     call delay_1us
05A  00501 │                            load s5, 01                    ;lower nibble 0x01
05B  30030 ╰──────⤙                     call LCD_CMD
05C  30015 ╰──────⤙                     call delay_1ms                 ;wait > 1.64ms
05D  30015 ╰──────⤙                     call delay_1ms
05E  2A000 │                            return
           │
05F  01650 │            LCD_WRITE_CHAR: load s6, s5                    ; s6 is X, s7 is Y
060  01750 │                            load s7, s5
061  0A60F │                            and s6, 0x0F
062  0A7F0 │                            and s7, 0xF0
063  0E620 │                            xor s6, 20
064  0E720 │                            xor s7, 20
           │
065  2060E │                            sr0 s6                         ; s6>>4
066  2060E │                            sr0 s6
067  2060E │                            sr0 s6
068  2060E │                            sr0 s6
           │
069  01650 │                            load s6, s5
06A  30030 ╰──────⤙                     call LCD_CMD
06B  30002 ╰──────⤙                     call delay_1us
           │
06C  01750 │                            load s7, s5
06D  30030 ╰──────⤙                     call LCD_CMD
06E  30010 ╰──────⤙                     call delay_40us
06F  2A000 │                            return
           │
070  0C520 ╭──────▶          LCD_CHARA: or s5, 20
071  2C501 │                            output s5, LCD_PORT
072  30029 ╰──────⤙                     call LCD_E_PULSE
073  2A000 │                            return
           │
3FF        │                            ;IMPORTANTE: USEN s8-sF
           │
           │
           │
074        │              spi_done_isr:
3FF        │                            address 3FF                    ; Switch to interrupt vector address
3FF  34074 │     ╭⤙                     jump spi_done_isr              ; Assemble instruction at interrupt vector location
074        │     │                      address spi_done_isr           ; Resume assembly at address previously captured in "spi_done_isr"
074        │     │                      ;TODO
074  30006 ╰─────┴⤙                     call delay_8us
075  30092 ╭──────⤙                     call next_16bit_rom
076  30078 │     ╭⤙                     call spi_send
           │     │
077  38001 │     │                      returni enable
           │     │
078  018B0 ╭─────┴▶           spi_send: load s8, low_rom
079  2C800 │                            output s8, spi_port
           │
07A  018A0 │                            load s8, high_rom
07B  2C800 │                            output s8, spi_port
           │
07C  00832 │                            load s8, 32
07D  2C800 │                            output s8, spi_port
           │
07E  00800 │                            load s8, 00
07F  2C800 │                            output s8, spi_port
           │
080        │                            ;32 clock cycles
080  01880 │                            load s8, s8
081  01880 │                            load s8, s8
082  01880 │                            load s8, s8
083  01880 │                            load s8, s8
084  01880 │                            load s8, s8
085  01880 │                            load s8, s8
086  01880 │                            load s8, s8
087  01880 │                            load s8, s8
088  01880 │                            load s8, s8
089  01880 │                            load s8, s8
08A  01880 │                            load s8, s8
08B  01880 │                            load s8, s8
08C  01880 │                            load s8, s8
08D  01880 │                            load s8, s8
08E  01880 │                            load s8, s8
08F  01880 │                            load s8, s8
           │
090  01880 │                            load s8, s8
091        │                            ;OUTPUT s8, spi_port ;end
091  2A000 │                            return
           │
092        │            next_16bit_rom:
092        │                            ;high byte
092  2C902 ╰────┬─▶                     output point, rom_oport
093  04A00 │    │                       input high_rom, rom_iport
094  18901 │    │                       add point, 01
           │    │
095        │    │                       ;low byte
095  2C902 │    │                       output point, rom_oport
096  04B00 │    │                       input low_rom, rom_iport
097  18901 │    │                       add point, 01
           │    │
098  1497E │    │                       compare point, n_points
099  3549B │    │╭⤙                     jump NZ, .end
09A  00900 │    ││                      load point, 00
09B        │    ││                .end:
09B  2A000 │    │╰▶                     return
           │    │
           │    │
09C  00900 ╰──────▶               MAIN: load point, 00
           │    │
09D  00580 │    │                       load s5, 80
09E  2C501 │    │                       output s5, LCD_PORT
09F  30024 ╰──────⤙                     call delay_1s
0A0  30034 ╰──────⤙                     call LCD_INIT
           │    │
0A1  00504 │    │                       load s5, 04                    ;high nibble 0x28
0A2  30070 ╰──────⤙                     call LCD_CHARA
0A3  30002 ╰──────⤙                     call delay_1us
0A4  0050A │    │                       load s5, 0A                    ;lower nibble 0x28
0A5  30070 ╰──────⤙                     call LCD_CHARA
0A6  30010 ╰──────⤙                     call delay_40us
           │    │
           │    │
0A7  30002 ╰──────⤙                     call delay_1us
           │    │
0A8  30092 │    ╰─⤙                     call next_16bit_rom
0A9  30078 ╰──────⤙                     call spi_send

0AA                              loopp:
0AA  01FF0       ╭▶                     load sf, sf
0AB  340AA       ╰⤙                     jump loopp


All unused memory locations contain zero (equivalent to "LOAD s0, 00")


PSM files that have been assembled
----------------------------------
    /home/leon/Documents/Code/sistemas-empotrados-S6/codigo-ensamblador/Practica1/program.asm
    /home/leon/Documents/Code/sistemas-empotrados-S6/codigo-ensamblador/utils/lcd.asm
    /home/leon/Documents/Code/sistemas-empotrados-S6/codigo-ensamblador/utils/delay.asm


List of defined constants
-------------------------
    CONSTANT name      Value  Source PSM file   
 ----------------      -----  ---------------   
    BEL                07
    BS                 08
    CR                 0D
    DCS                90
    DEL                7F
    ESC                1B
    HT                 09
    LCD_PORT           01     ../utils/lcd.asm
    LF                 0A
    NUL                00
    ST                 9C
    VT                 0B
    c_delay_1us        0B     ../utils/delay.asm
    datestamp_day      0B
    datestamp_month    03
    datestamp_year     18
    n_points           7E     program.asm
    rom_iport          00     program.asm
    rom_oport          02     program.asm
    spi_port           00     program.asm
    timestamp_hours    08
    timestamp_minutes  22
    timestamp_seconds  0B


  No tables defined


List of text strings
--------------------
    STRING name      Value          Source PSM file
 --------------      -----          ---------------
    Opbasm_version$  "1.3.10"
    datestamp$       "11 Mar 2024"
    timestamp$       "08:34:11"


List of line labels
-------------------
    Label               Addr  Source PSM file   
 --------               ----  ---------------   
    LCD_CHARA           070   ../utils/lcd.asm
 *  LCD_CLEAR           057   ../utils/lcd.asm
    LCD_CMD             030   ../utils/lcd.asm
    LCD_E_PULSE         029   ../utils/lcd.asm
    LCD_INIT            034   ../utils/lcd.asm
 *  LCD_WRITE_CHAR      05F   ../utils/lcd.asm
    MAIN                09C   program.asm
    delay_1ms           015   ../utils/delay.asm
    delay_1s            024   ../utils/delay.asm
    delay_1us           002   ../utils/delay.asm
    delay_20ms          01F   ../utils/delay.asm
 *  delay_25us          00B   ../utils/delay.asm
    delay_40us          010   ../utils/delay.asm
    delay_5ms           01A   ../utils/delay.asm
    delay_8us           006   ../utils/delay.asm
    loopp               0AA   program.asm
    next_16bit_rom      092   program.asm
    next_16bit_rom.end  09B   program.asm
    spi_done_isr        074   program.asm
    spi_send            078   program.asm
    wait_1ms            016   ../utils/delay.asm
    wait_1s             025   ../utils/delay.asm
    wait_1us            003   ../utils/delay.asm
    wait_20ms           020   ../utils/delay.asm
 *  wait_25us           00C   ../utils/delay.asm
    wait_40us           011   ../utils/delay.asm
    wait_5ms            01B   ../utils/delay.asm
 *  wait_8us            007   ../utils/delay.asm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          2
   ADDCY        -
   AND          3
   CALL         55
   COMPARE      1
   DISABLE      -
   ENABLE       1
   FETCH        -
   INPUT        2
   JUMP         12
   LOAD         52
   OR           1
   OUTPUT       12
   RETURN       15
   RETURNI      1
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          4
   SR1          -
   SRA          -
   SRX          -
   STORE        -
   SUB          8
   SUBCY        -
   TEST         -
   XOR          4
